{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.authenticatedSubject = new BehaviorSubject(this.hasToken());\n    this.authenticated$ = this.authenticatedSubject.asObservable();\n    this._activeContactSubject = new BehaviorSubject(null);\n    this.activeContact$ = this._activeContactSubject.asObservable();\n  }\n  getToken() {\n    return localStorage.getItem('tksrtath') || '';\n  }\n  setToken(token) {\n    localStorage.setItem('tksrtath', token);\n  }\n  deleteToken() {\n    localStorage.removeItem('tksrtath');\n  }\n  get isAuthenticated() {\n    return this.authenticatedSubject.value;\n  }\n  setActiveContact(contact) {\n    this._activeContactSubject.next(contact);\n  }\n  getActiveContact() {\n    return this._activeContactSubject.value;\n  }\n  login(user) {\n    return this.http.post('http://localhost:8080/api/auth/anon', user).pipe(tap(resp => {\n      this.setToken(resp.data);\n      this.authenticatedSubject.next(true);\n    }));\n  }\n  register(user) {\n    return this.http.post('http://localhost:8080/api/auth/register', user);\n  }\n  logout() {\n    this.deleteToken();\n    return this.http.post('http://localhost:8080/api/auth/logout', {});\n  }\n  hasToken() {\n    return !!this.getToken();\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\nexport class Response {\n  constructor() {\n    this.statusCode = 0;\n    this.message = '';\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","constructor","http","authenticatedSubject","hasToken","authenticated$","asObservable","_activeContactSubject","activeContact$","getToken","localStorage","getItem","setToken","token","setItem","deleteToken","removeItem","isAuthenticated","value","setActiveContact","contact","next","getActiveContact","login","user","post","pipe","resp","data","register","logout","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn","Response","statusCode","message"],"sources":["C:\\Users\\Elvis Rosa\\Desktop\\Proyectos Spring\\chatbot\\chat\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject, take, tap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  private authenticatedSubject = new BehaviorSubject<boolean>(this.hasToken());\n  public authenticated$ = this.authenticatedSubject.asObservable();\n\n  private _activeContactSubject = new BehaviorSubject<null>(null);\n  public activeContact$ = this._activeContactSubject.asObservable();\n\n  constructor(private http: HttpClient) { }\n\n  getToken(): string {\n    return localStorage.getItem('tksrtath') || '';\n  }\n\n  setToken(token: string) {\n    localStorage.setItem('tksrtath', token);\n  }\n\n  deleteToken() {\n    localStorage.removeItem('tksrtath');\n  }\n\n  get isAuthenticated(): boolean {\n    return this.authenticatedSubject.value;\n  }\n\n\n  setActiveContact(contact: any): void {\n    this._activeContactSubject.next(contact);\n  }\n\n  getActiveContact(): any | null {\n    return this._activeContactSubject.value;\n  }\n\n\n  login(user: any) {\n    return this.http.post<Response>('http://localhost:8080/api/auth/anon', user).pipe(\n      tap(resp => {\n        this.setToken(resp.data)\n        this.authenticatedSubject.next(true)\n      })\n    )\n  }\n\n  register(user: any) {\n    return this.http.post('http://localhost:8080/api/auth/register', user);\n  }\n\n  logout() {\n    this.deleteToken();\n    return this.http.post('http://localhost:8080/api/auth/logout', {});\n  }\n\n  hasToken(): boolean {\n    return !!this.getToken();\n  }\n\n}\n\n\nexport class Response {\n  statusCode: number = 0;\n  message: string = '';\n  data: any;\n}\n"],"mappings":"AAEA,SAASA,eAAe,EAAQC,GAAG,QAAQ,MAAM;;;AAKjD,OAAM,MAAOC,WAAW;EAQtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IANhB,KAAAC,oBAAoB,GAAG,IAAIL,eAAe,CAAU,IAAI,CAACM,QAAQ,EAAE,CAAC;IACrE,KAAAC,cAAc,GAAG,IAAI,CAACF,oBAAoB,CAACG,YAAY,EAAE;IAExD,KAAAC,qBAAqB,GAAG,IAAIT,eAAe,CAAO,IAAI,CAAC;IACxD,KAAAU,cAAc,GAAG,IAAI,CAACD,qBAAqB,CAACD,YAAY,EAAE;EAEzB;EAExCG,QAAQA,CAAA;IACN,OAAOC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE;EAC/C;EAEAC,QAAQA,CAACC,KAAa;IACpBH,YAAY,CAACI,OAAO,CAAC,UAAU,EAAED,KAAK,CAAC;EACzC;EAEAE,WAAWA,CAAA;IACTL,YAAY,CAACM,UAAU,CAAC,UAAU,CAAC;EACrC;EAEA,IAAIC,eAAeA,CAAA;IACjB,OAAO,IAAI,CAACd,oBAAoB,CAACe,KAAK;EACxC;EAGAC,gBAAgBA,CAACC,OAAY;IAC3B,IAAI,CAACb,qBAAqB,CAACc,IAAI,CAACD,OAAO,CAAC;EAC1C;EAEAE,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAACf,qBAAqB,CAACW,KAAK;EACzC;EAGAK,KAAKA,CAACC,IAAS;IACb,OAAO,IAAI,CAACtB,IAAI,CAACuB,IAAI,CAAW,qCAAqC,EAAED,IAAI,CAAC,CAACE,IAAI,CAC/E3B,GAAG,CAAC4B,IAAI,IAAG;MACT,IAAI,CAACf,QAAQ,CAACe,IAAI,CAACC,IAAI,CAAC;MACxB,IAAI,CAACzB,oBAAoB,CAACkB,IAAI,CAAC,IAAI,CAAC;IACtC,CAAC,CAAC,CACH;EACH;EAEAQ,QAAQA,CAACL,IAAS;IAChB,OAAO,IAAI,CAACtB,IAAI,CAACuB,IAAI,CAAC,yCAAyC,EAAED,IAAI,CAAC;EACxE;EAEAM,MAAMA,CAAA;IACJ,IAAI,CAACf,WAAW,EAAE;IAClB,OAAO,IAAI,CAACb,IAAI,CAACuB,IAAI,CAAC,uCAAuC,EAAE,EAAE,CAAC;EACpE;EAEArB,QAAQA,CAAA;IACN,OAAO,CAAC,CAAC,IAAI,CAACK,QAAQ,EAAE;EAC1B;;;uBAxDWT,WAAW,EAAA+B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXlC,WAAW;MAAAmC,OAAA,EAAXnC,WAAW,CAAAoC,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA;;AA+DpB,OAAM,MAAOC,QAAQ;EAArBrC,YAAA;IACE,KAAAsC,UAAU,GAAW,CAAC;IACtB,KAAAC,OAAO,GAAW,EAAE;EAEtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}