{"ast":null,"code":"import { Client } from '@stomp/stompjs';\nimport * as SockJS from 'sockjs-client';\nimport { BehaviorSubject, Subject, throttleTime } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class WsService {\n  constructor(auth) {\n    this.auth = auth;\n    this.connected = false;\n    this.messageSubject = new Subject();\n    this.message$ = this.messageSubject.asObservable();\n    this.typingSubject = new Subject();\n    this.typingStatusSubject = new BehaviorSubject({});\n    this.typing$ = this.typingStatusSubject.asObservable();\n  }\n  initializeWebSocketConnection() {\n    const token = this.auth.getToken();\n    this.stompClient = new Client({\n      brokerURL: '',\n      webSocketFactory: () => new SockJS(`http://localhost:8080/chat-websocket?ss=${token}`),\n      connectHeaders: {\n        'Authorization': `Bearer ${token}`\n      },\n      debug: str => {\n        // console.log(new Date(), str);\n      },\n      reconnectDelay: 50000\n    });\n    this.stompClient.onConnect = frame => {\n      this.connected = true;\n      this.stompClient.subscribe('/user/queue/messages', message => {\n        const data = JSON.parse(message.body);\n        // console.log(data)\n        this.messageSubject.next(data);\n      });\n      this.stompClient.subscribe('/user/queue/typing', message => {\n        this.typingStatusSubject.next(message.body);\n      });\n      this.setupTypingNotifier();\n    };\n    this.stompClient.onStompError = frame => {\n      this.connected = false;\n      // console.error('Broker reported error: ' + frame.headers['message']);\n      // console.error('Additional details: ' + frame.body);\n    };\n\n    this.stompClient.onDisconnect = frame => {\n      this.connected = false;\n      // console.log(`Disconnected ${!this.stompClient.connected}`);\n    };\n\n    this.connect();\n  }\n  connect() {\n    this.stompClient.activate();\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.deactivate();\n    }\n  }\n  sendMessage(message) {\n    if (this.connected) {\n      this.stompClient.publish({\n        destination: '/app/chat.send',\n        body: JSON.stringify(message)\n      });\n    }\n  }\n  notifyTyping(activeContact) {\n    this.activeContact = activeContact;\n    this.typingSubject.next();\n  }\n  setupTypingNotifier() {\n    this.typingSubscription = this.typingSubject.pipe(throttleTime(800)).subscribe(() => {\n      const typingPayload = {\n        to: this.activeContact?.username || 'admin',\n        type: 'typing',\n        content: '',\n        timestamp: null,\n        from: ''\n      };\n      this.stompClient.publish({\n        destination: '/app/chat.typing',\n        body: JSON.stringify(typingPayload)\n      });\n    });\n  }\n  sendTypingNotification(activeContact, type) {\n    const typingMessage = {\n      to: activeContact.username,\n      type: type,\n      content: '',\n      timestamp: null,\n      from: null\n    };\n    this.stompClient.publish({\n      destination: '/app/chat.typing',\n      body: JSON.stringify(typingMessage)\n    });\n  }\n  static {\n    this.ɵfac = function WsService_Factory(t) {\n      return new (t || WsService)(i0.ɵɵinject(i1.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: WsService,\n      factory: WsService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["Client","SockJS","BehaviorSubject","Subject","throttleTime","WsService","constructor","auth","connected","messageSubject","message$","asObservable","typingSubject","typingStatusSubject","typing$","initializeWebSocketConnection","token","getToken","stompClient","brokerURL","webSocketFactory","connectHeaders","debug","str","reconnectDelay","onConnect","frame","subscribe","message","data","JSON","parse","body","next","setupTypingNotifier","onStompError","onDisconnect","connect","activate","disconnect","deactivate","sendMessage","publish","destination","stringify","notifyTyping","activeContact","typingSubscription","pipe","typingPayload","to","username","type","content","timestamp","from","sendTypingNotification","typingMessage","i0","ɵɵinject","i1","AuthService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Elvis Rosa\\Desktop\\Proyectos Spring\\chatbot\\chat\\src\\app\\services\\ws.service.ts"],"sourcesContent":["import { Injectable, OnInit } from '@angular/core';\nimport { Client } from '@stomp/stompjs';\nimport * as SockJS from 'sockjs-client';\nimport { Message } from '../models/Message';\nimport { AuthService } from './auth.service';\nimport { BehaviorSubject, debounceTime, Subject, Subscription, throttleTime } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WsService {\n\n  private stompClient!: Client;\n  private connected: boolean = false;\n  private messageSubject = new Subject<Message>();\n  public message$ = this.messageSubject.asObservable();\n\n  private typingSubject = new Subject<void>();\n  private typingSubscription!: Subscription;\n\n  private typingStatusSubject = new BehaviorSubject<any>({});\n  public typing$ = this.typingStatusSubject.asObservable();\n\n  private activeContact:any | undefined;\n\n  constructor(private auth: AuthService) { }\n\n  public initializeWebSocketConnection() {\n    const token = this.auth.getToken();\n    this.stompClient = new Client({\n      brokerURL: '',\n      webSocketFactory: () => new SockJS(`http://localhost:8080/chat-websocket?ss=${token}`),\n      connectHeaders: {\n        'Authorization': `Bearer ${token}`\n      },\n      debug: (str) => {\n        // console.log(new Date(), str);\n      },\n      reconnectDelay: 50000,\n    });\n\n    this.stompClient.onConnect = (frame) => {\n      this.connected = true;\n      this.stompClient.subscribe('/user/queue/messages', (message) => {\n        const data = JSON.parse(message.body)\n        // console.log(data)\n        this.messageSubject.next(data);\n      });\n\n\n      this.stompClient.subscribe('/user/queue/typing', (message) => {\n        this.typingStatusSubject.next(message.body);\n      });\n\n      this.setupTypingNotifier();\n\n    };\n\n    this.stompClient.onStompError = (frame) => {\n      this.connected = false;\n      // console.error('Broker reported error: ' + frame.headers['message']);\n      // console.error('Additional details: ' + frame.body);\n    };\n\n    this.stompClient.onDisconnect = (frame) => {\n      this.connected = false;\n      // console.log(`Disconnected ${!this.stompClient.connected}`);\n    }\n\n    this.connect();\n  }\n\n  public connect(): void {\n    this.stompClient.activate();\n  }\n\n  public disconnect(): void {\n    if (this.stompClient) {\n      this.stompClient.deactivate();\n    }\n  }\n\n  public sendMessage(message: Message): void {\n    if (this.connected) {\n      this.stompClient.publish({\n        destination: '/app/chat.send',\n        body: JSON.stringify(message),\n      });\n    }\n  }\n\n  public notifyTyping(activeContact:any): void {\n    this.activeContact = activeContact;\n    this.typingSubject.next();\n  }\n\n\n  private setupTypingNotifier(): void {\n    this.typingSubscription = this.typingSubject\n      .pipe(throttleTime(800))\n      .subscribe(() => {\n        const typingPayload = {\n          to: this.activeContact?.username || 'admin',\n          type: 'typing',\n          content: '',\n          timestamp: null,\n          from: '',\n        };\n\n        this.stompClient.publish({\n          destination: '/app/chat.typing',\n          body: JSON.stringify(typingPayload),\n        });\n      });\n  }\n\n  sendTypingNotification(activeContact: any, type: string) {\n    const typingMessage = {\n      to: activeContact.username,\n      type: type,\n      content: '',\n      timestamp: null,\n      from: null\n    };\n\n    this.stompClient.publish({\n      destination: '/app/chat.typing',\n      body: JSON.stringify(typingMessage)\n    });\n  }\n}\n\n"],"mappings":"AACA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,OAAO,KAAKC,MAAM,MAAM,eAAe;AAGvC,SAASC,eAAe,EAAgBC,OAAO,EAAgBC,YAAY,QAAQ,MAAM;;;AAKzF,OAAM,MAAOC,SAAS;EAepBC,YAAoBC,IAAiB;IAAjB,KAAAA,IAAI,GAAJA,IAAI;IAZhB,KAAAC,SAAS,GAAY,KAAK;IAC1B,KAAAC,cAAc,GAAG,IAAIN,OAAO,EAAW;IACxC,KAAAO,QAAQ,GAAG,IAAI,CAACD,cAAc,CAACE,YAAY,EAAE;IAE5C,KAAAC,aAAa,GAAG,IAAIT,OAAO,EAAQ;IAGnC,KAAAU,mBAAmB,GAAG,IAAIX,eAAe,CAAM,EAAE,CAAC;IACnD,KAAAY,OAAO,GAAG,IAAI,CAACD,mBAAmB,CAACF,YAAY,EAAE;EAIf;EAElCI,6BAA6BA,CAAA;IAClC,MAAMC,KAAK,GAAG,IAAI,CAACT,IAAI,CAACU,QAAQ,EAAE;IAClC,IAAI,CAACC,WAAW,GAAG,IAAIlB,MAAM,CAAC;MAC5BmB,SAAS,EAAE,EAAE;MACbC,gBAAgB,EAAEA,CAAA,KAAM,IAAInB,MAAM,CAAC,2CAA2Ce,KAAK,EAAE,CAAC;MACtFK,cAAc,EAAE;QACd,eAAe,EAAE,UAAUL,KAAK;OACjC;MACDM,KAAK,EAAGC,GAAG,IAAI;QACb;MAAA,CACD;MACDC,cAAc,EAAE;KACjB,CAAC;IAEF,IAAI,CAACN,WAAW,CAACO,SAAS,GAAIC,KAAK,IAAI;MACrC,IAAI,CAAClB,SAAS,GAAG,IAAI;MACrB,IAAI,CAACU,WAAW,CAACS,SAAS,CAAC,sBAAsB,EAAGC,OAAO,IAAI;QAC7D,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;QACrC;QACA,IAAI,CAACvB,cAAc,CAACwB,IAAI,CAACJ,IAAI,CAAC;MAChC,CAAC,CAAC;MAGF,IAAI,CAACX,WAAW,CAACS,SAAS,CAAC,oBAAoB,EAAGC,OAAO,IAAI;QAC3D,IAAI,CAACf,mBAAmB,CAACoB,IAAI,CAACL,OAAO,CAACI,IAAI,CAAC;MAC7C,CAAC,CAAC;MAEF,IAAI,CAACE,mBAAmB,EAAE;IAE5B,CAAC;IAED,IAAI,CAAChB,WAAW,CAACiB,YAAY,GAAIT,KAAK,IAAI;MACxC,IAAI,CAAClB,SAAS,GAAG,KAAK;MACtB;MACA;IACF,CAAC;;IAED,IAAI,CAACU,WAAW,CAACkB,YAAY,GAAIV,KAAK,IAAI;MACxC,IAAI,CAAClB,SAAS,GAAG,KAAK;MACtB;IACF,CAAC;;IAED,IAAI,CAAC6B,OAAO,EAAE;EAChB;EAEOA,OAAOA,CAAA;IACZ,IAAI,CAACnB,WAAW,CAACoB,QAAQ,EAAE;EAC7B;EAEOC,UAAUA,CAAA;IACf,IAAI,IAAI,CAACrB,WAAW,EAAE;MACpB,IAAI,CAACA,WAAW,CAACsB,UAAU,EAAE;;EAEjC;EAEOC,WAAWA,CAACb,OAAgB;IACjC,IAAI,IAAI,CAACpB,SAAS,EAAE;MAClB,IAAI,CAACU,WAAW,CAACwB,OAAO,CAAC;QACvBC,WAAW,EAAE,gBAAgB;QAC7BX,IAAI,EAAEF,IAAI,CAACc,SAAS,CAAChB,OAAO;OAC7B,CAAC;;EAEN;EAEOiB,YAAYA,CAACC,aAAiB;IACnC,IAAI,CAACA,aAAa,GAAGA,aAAa;IAClC,IAAI,CAAClC,aAAa,CAACqB,IAAI,EAAE;EAC3B;EAGQC,mBAAmBA,CAAA;IACzB,IAAI,CAACa,kBAAkB,GAAG,IAAI,CAACnC,aAAa,CACzCoC,IAAI,CAAC5C,YAAY,CAAC,GAAG,CAAC,CAAC,CACvBuB,SAAS,CAAC,MAAK;MACd,MAAMsB,aAAa,GAAG;QACpBC,EAAE,EAAE,IAAI,CAACJ,aAAa,EAAEK,QAAQ,IAAI,OAAO;QAC3CC,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAE,EAAE;QACXC,SAAS,EAAE,IAAI;QACfC,IAAI,EAAE;OACP;MAED,IAAI,CAACrC,WAAW,CAACwB,OAAO,CAAC;QACvBC,WAAW,EAAE,kBAAkB;QAC/BX,IAAI,EAAEF,IAAI,CAACc,SAAS,CAACK,aAAa;OACnC,CAAC;IACJ,CAAC,CAAC;EACN;EAEAO,sBAAsBA,CAACV,aAAkB,EAAEM,IAAY;IACrD,MAAMK,aAAa,GAAG;MACpBP,EAAE,EAAEJ,aAAa,CAACK,QAAQ;MAC1BC,IAAI,EAAEA,IAAI;MACVC,OAAO,EAAE,EAAE;MACXC,SAAS,EAAE,IAAI;MACfC,IAAI,EAAE;KACP;IAED,IAAI,CAACrC,WAAW,CAACwB,OAAO,CAAC;MACvBC,WAAW,EAAE,kBAAkB;MAC/BX,IAAI,EAAEF,IAAI,CAACc,SAAS,CAACa,aAAa;KACnC,CAAC;EACJ;;;uBAvHWpD,SAAS,EAAAqD,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAATxD,SAAS;MAAAyD,OAAA,EAATzD,SAAS,CAAA0D,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}