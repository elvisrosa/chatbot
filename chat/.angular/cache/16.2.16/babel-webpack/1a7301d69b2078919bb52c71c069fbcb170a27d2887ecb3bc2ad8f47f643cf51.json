{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nexport let SidebarComponent = class SidebarComponent {\n  constructor() {\n    this.contacts = [];\n    this.activeContactId = 0;\n    this.autenticated = false;\n    this.contactSelected = new EventEmitter();\n    this.searchTerm = \"\";\n  }\n  get filteredContacts() {\n    // Simulated data for demonstration purposes\n    let contacts = [];\n    for (let i = 0; i < 25; i++) {\n      contacts.push({\n        id: i + 1,\n        name: \"John Doe \" + (i + 1),\n        lastMessage: \"Hello, how are you? \" + i,\n        lastMessageTime: \"10:30 AM\",\n        lastMessageStatus: \"sent\",\n        unreadCount: i + 1,\n        status: \"sent\",\n        avatar: \"../../../assets/svgs/user.svg\"\n      });\n    }\n    if (this.searchTerm) {\n      const term = this.searchTerm.toLowerCase();\n      return contacts.filter(contact => contact.name.toLowerCase().includes(term) || contact.lastMessage.toLowerCase().includes(term));\n    }\n    return contacts;\n  }\n  selectContact(id) {\n    this.contactSelected.emit(id);\n  }\n  getStatusIcon(status) {\n    switch (status) {\n      case \"sent\":\n        return \"check\";\n      case \"delivered\":\n        return \"done_all\";\n      case \"read\":\n        return \"done_all\";\n      default:\n        return \"schedule\";\n    }\n  }\n};\n__decorate([Input()], SidebarComponent.prototype, \"contacts\", void 0);\n__decorate([Input()], SidebarComponent.prototype, \"activeContactId\", void 0);\n__decorate([Input()], SidebarComponent.prototype, \"autenticated\", void 0);\n__decorate([Output()], SidebarComponent.prototype, \"contactSelected\", void 0);\nSidebarComponent = __decorate([Component({\n  selector: \"app-sidebar\",\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['./sidebar.component.css']\n})], SidebarComponent);","map":{"version":3,"names":["Component","EventEmitter","Input","Output","SidebarComponent","constructor","contacts","activeContactId","autenticated","contactSelected","searchTerm","filteredContacts","i","push","id","name","lastMessage","lastMessageTime","lastMessageStatus","unreadCount","status","avatar","term","toLowerCase","filter","contact","includes","selectContact","emit","getStatusIcon","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\Elvis Rosa\\Desktop\\Proyectos Spring\\chat\\src\\app\\components\\sidebar\\sidebar.component.ts"],"sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: \"app-sidebar\",\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['./sidebar.component.css']\n})\n\nexport class SidebarComponent {\n\n  @Input() contacts: any[] = []\n  @Input() activeContactId = 0\n  @Input() autenticated: boolean = false\n  @Output() contactSelected = new EventEmitter<number>()\n\n  searchTerm = \"\"\n\n  get filteredContacts() {\n\n    // Simulated data for demonstration purposes\n    let contacts = [];\n    for (let i = 0; i < 25; i++) {\n      contacts.push({\n        id: i + 1,\n        name: \"John Doe \" + (i + 1),\n        lastMessage: \"Hello, how are you? \" + i,\n        lastMessageTime: \"10:30 AM\",\n        lastMessageStatus: \"sent\",\n        unreadCount: i + 1,\n        status: \"sent\",\n        avatar: \"../../../assets/svgs/user.svg\",\n      });\n    }\n\n\n    if (this.searchTerm) {\n      const term = this.searchTerm.toLowerCase()\n      return contacts.filter(\n        (contact) => contact.name.toLowerCase().includes(term) || contact.lastMessage.toLowerCase().includes(term),\n      )\n    }\n    return contacts;\n  }\n\n  selectContact(id: number) {\n    this.contactSelected.emit(id)\n  }\n\n  getStatusIcon(status: string): string {\n    switch (status) {\n      case \"sent\":\n        return \"check\"\n      case \"delivered\":\n        return \"done_all\"\n      case \"read\":\n        return \"done_all\"\n      default:\n        return \"schedule\"\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,YAAY,EAAEC,KAAK,EAAEC,MAAM,QAAQ,eAAe;AAQ/D,WAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAAtBC,YAAA;IAEI,KAAAC,QAAQ,GAAU,EAAE;IACpB,KAAAC,eAAe,GAAG,CAAC;IACnB,KAAAC,YAAY,GAAY,KAAK;IAC5B,KAAAC,eAAe,GAAG,IAAIR,YAAY,EAAU;IAEtD,KAAAS,UAAU,GAAG,EAAE;EA6CjB;EA3CE,IAAIC,gBAAgBA,CAAA;IAElB;IACA,IAAIL,QAAQ,GAAG,EAAE;IACjB,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC3BN,QAAQ,CAACO,IAAI,CAAC;QACZC,EAAE,EAAEF,CAAC,GAAG,CAAC;QACTG,IAAI,EAAE,WAAW,IAAIH,CAAC,GAAG,CAAC,CAAC;QAC3BI,WAAW,EAAE,sBAAsB,GAAGJ,CAAC;QACvCK,eAAe,EAAE,UAAU;QAC3BC,iBAAiB,EAAE,MAAM;QACzBC,WAAW,EAAEP,CAAC,GAAG,CAAC;QAClBQ,MAAM,EAAE,MAAM;QACdC,MAAM,EAAE;OACT,CAAC;;IAIJ,IAAI,IAAI,CAACX,UAAU,EAAE;MACnB,MAAMY,IAAI,GAAG,IAAI,CAACZ,UAAU,CAACa,WAAW,EAAE;MAC1C,OAAOjB,QAAQ,CAACkB,MAAM,CACnBC,OAAO,IAAKA,OAAO,CAACV,IAAI,CAACQ,WAAW,EAAE,CAACG,QAAQ,CAACJ,IAAI,CAAC,IAAIG,OAAO,CAACT,WAAW,CAACO,WAAW,EAAE,CAACG,QAAQ,CAACJ,IAAI,CAAC,CAC3G;;IAEH,OAAOhB,QAAQ;EACjB;EAEAqB,aAAaA,CAACb,EAAU;IACtB,IAAI,CAACL,eAAe,CAACmB,IAAI,CAACd,EAAE,CAAC;EAC/B;EAEAe,aAAaA,CAACT,MAAc;IAC1B,QAAQA,MAAM;MACZ,KAAK,MAAM;QACT,OAAO,OAAO;MAChB,KAAK,WAAW;QACd,OAAO,UAAU;MACnB,KAAK,MAAM;QACT,OAAO,UAAU;MACnB;QACE,OAAO,UAAU;;EAEvB;CACD;AAlDUU,UAAA,EAAR5B,KAAK,EAAE,C,iDAAqB;AACpB4B,UAAA,EAAR5B,KAAK,EAAE,C,wDAAoB;AACnB4B,UAAA,EAAR5B,KAAK,EAAE,C,qDAA8B;AAC5B4B,UAAA,EAAT3B,MAAM,EAAE,C,wDAA6C;AAL3CC,gBAAgB,GAAA0B,UAAA,EAN5B9B,SAAS,CAAC;EACT+B,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,C,EAEW7B,gBAAgB,CAoD5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}