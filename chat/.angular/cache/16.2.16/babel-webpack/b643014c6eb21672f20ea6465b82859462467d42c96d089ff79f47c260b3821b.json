{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.$authenticated = new BehaviorSubject(false).asObservable();\n    this.$user = new BehaviorSubject(null).asObservable();\n  }\n  getToken() {\n    return localStorage.getItem('tksrtath') || '';\n  }\n  setToken(token) {\n    localStorage.setItem('tksrtath', token);\n  }\n  deleteToken() {\n    localStorage.removeItem('tksrtath');\n  }\n  isAuthenticated() {\n    const token = this.getToken();\n    if (!token) {\n      return true;\n    }\n    return false;\n  }\n  login(user) {\n    return this.http.post('http://localhost:8080/api/auth/login', user);\n  }\n  register(user) {\n    return this.http.post('http://localhost:8080/api/auth/register', user);\n  }\n  logout() {\n    return this.http.post('http://localhost:8080/api/auth/logout', {});\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","AuthService","constructor","http","$authenticated","asObservable","$user","getToken","localStorage","getItem","setToken","token","setItem","deleteToken","removeItem","isAuthenticated","login","user","post","register","logout","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Elvis Rosa\\Desktop\\Proyectos Spring\\chat\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n\n  private $authenticated: any = new BehaviorSubject(false).asObservable();\n  private $user: any = new BehaviorSubject(null).asObservable();\n\n  constructor(private http: HttpClient) { }\n\n  getToken(): string {\n    return localStorage.getItem('tksrtath') || '';\n  }\n\n  setToken(token: string) {\n    localStorage.setItem('tksrtath', token);\n  }\n\n  deleteToken() {\n    localStorage.removeItem('tksrtath');\n  }\n\n  isAuthenticated(): boolean {\n    const token = this.getToken();\n    if (!token) {\n      return true;\n    }\n    return false\n  }\n\n  login(user: any) {\n    return this.http.post('http://localhost:8080/api/auth/login', user);\n  }\n\n  register(user: any) {\n    return this.http.post('http://localhost:8080/api/auth/register', user);\n  }\n\n  logout() {\n    return this.http.post('http://localhost:8080/api/auth/logout', {});\n  }\n\n}\n"],"mappings":"AAEA,SAASA,eAAe,QAAQ,MAAM;;;AAKtC,OAAM,MAAOC,WAAW;EAMtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHhB,KAAAC,cAAc,GAAQ,IAAIJ,eAAe,CAAC,KAAK,CAAC,CAACK,YAAY,EAAE;IAC/D,KAAAC,KAAK,GAAQ,IAAIN,eAAe,CAAC,IAAI,CAAC,CAACK,YAAY,EAAE;EAErB;EAExCE,QAAQA,CAAA;IACN,OAAOC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE;EAC/C;EAEAC,QAAQA,CAACC,KAAa;IACpBH,YAAY,CAACI,OAAO,CAAC,UAAU,EAAED,KAAK,CAAC;EACzC;EAEAE,WAAWA,CAAA;IACTL,YAAY,CAACM,UAAU,CAAC,UAAU,CAAC;EACrC;EAEAC,eAAeA,CAAA;IACb,MAAMJ,KAAK,GAAG,IAAI,CAACJ,QAAQ,EAAE;IAC7B,IAAI,CAACI,KAAK,EAAE;MACV,OAAO,IAAI;;IAEb,OAAO,KAAK;EACd;EAEAK,KAAKA,CAACC,IAAS;IACb,OAAO,IAAI,CAACd,IAAI,CAACe,IAAI,CAAC,sCAAsC,EAAED,IAAI,CAAC;EACrE;EAEAE,QAAQA,CAACF,IAAS;IAChB,OAAO,IAAI,CAACd,IAAI,CAACe,IAAI,CAAC,yCAAyC,EAAED,IAAI,CAAC;EACxE;EAEAG,MAAMA,CAAA;IACJ,OAAO,IAAI,CAACjB,IAAI,CAACe,IAAI,CAAC,uCAAuC,EAAE,EAAE,CAAC;EACpE;;;uBAtCWjB,WAAW,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAXvB,WAAW;MAAAwB,OAAA,EAAXxB,WAAW,CAAAyB,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}