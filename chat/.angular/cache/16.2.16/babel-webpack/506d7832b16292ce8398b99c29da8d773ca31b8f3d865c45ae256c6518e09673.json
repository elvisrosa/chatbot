{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Client } from '@stomp/stompjs';\nimport * as SockJS from 'sockjs-client';\nimport { Message } from '../models/Message';\nimport { CommonModule } from '@angular/common';\nexport let ChatComponent = class ChatComponent {\n  constructor() {\n    this.connected = false;\n    this.messages = [];\n    this.message = new Message();\n  }\n  ngOnInit() {\n    this.stompClient = new Client({\n      brokerURL: '',\n      webSocketFactory: () => new SockJS('http://localhost:8080/chat-websocket'),\n      debug: str => {\n        console.log(new Date(), str);\n      },\n      reconnectDelay: 5000\n    });\n    this.stompClient.onConnect = frame => {\n      this.connected = true;\n      console.log('Connected: ' + frame);\n      this.stompClient.subscribe('/topic/messages', message => {\n        console.log('Received message: ' + message.body);\n      });\n    };\n    this.stompClient.onStompError = frame => {\n      this.connected = false;\n      console.error('Broker reported error: ' + frame.headers['message']);\n      console.error('Additional details: ' + frame.body);\n    };\n    this.stompClient.onDisconnect = frame => {\n      this.connected = false;\n      console.log(`Disconnected ${!this.stompClient.connected}`);\n    };\n    this.connect();\n  }\n  connect() {\n    this.stompClient.activate();\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.deactivate();\n    }\n  }\n  sendMessage() {\n    if (this.connected) {\n      this.stompClient.publish({\n        destination: '/app/chat',\n        body: JSON.stringify(this.message)\n      });\n      this.message = new Message(); // Reset the message after sending\n    } else {\n      console.error('Not connected to the server.');\n    }\n  }\n  ngOnDestroy() {\n    this.disconnect();\n  }\n};\nChatComponent = __decorate([Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  imports: [CommonModule]\n})], ChatComponent);","map":{"version":3,"names":["Component","Client","SockJS","Message","CommonModule","ChatComponent","constructor","connected","messages","message","ngOnInit","stompClient","brokerURL","webSocketFactory","debug","str","console","log","Date","reconnectDelay","onConnect","frame","subscribe","body","onStompError","error","headers","onDisconnect","connect","activate","disconnect","deactivate","sendMessage","publish","destination","JSON","stringify","ngOnDestroy","__decorate","selector","templateUrl","imports"],"sources":["C:\\Users\\Elvis Rosa\\Desktop\\Proyectos Spring\\chat\\src\\app\\components\\chat.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Client } from '@stomp/stompjs';\nimport * as SockJS from 'sockjs-client';\nimport { Message } from '../models/Message';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  imports: [CommonModule],\n})\nexport class ChatComponent implements OnInit {\n\n  private stompClient!: Client;\n  private connected: boolean = false;\n  public messages: Message[] = [];\n  public message: Message = new Message();\n\n  ngOnInit(): void {\n    this.stompClient = new Client({\n      brokerURL: '',\n      webSocketFactory: () => new SockJS('http://localhost:8080/chat-websocket'),\n      debug: (str) => {\n        console.log(new Date(), str);\n      },\n      reconnectDelay: 5000,\n    });\n\n    this.stompClient.onConnect = (frame) => {\n      this.connected = true;\n      console.log('Connected: ' + frame);\n      this.stompClient.subscribe('/topic/messages', (message) => {\n        console.log('Received message: ' + message.body);\n      });\n    };\n\n    this.stompClient.onStompError = (frame) => {\n      this.connected = false;\n      console.error('Broker reported error: ' + frame.headers['message']);\n      console.error('Additional details: ' + frame.body);\n    };\n\n    this.stompClient.onDisconnect = (frame) => {\n      this.connected = false;\n      console.log(`Disconnected ${!this.stompClient.connected}`);\n    }\n\n    this.connect();\n  }\n\n  private connect(): void {\n    this.stompClient.activate();\n  }\n\n  private disconnect(): void {\n    if (this.stompClient) {\n      this.stompClient.deactivate();\n    }\n  }\n\n  sendMessage(): void {\n    if (this.connected) {\n      this.stompClient.publish({\n        destination: '/app/chat',\n        body: JSON.stringify(this.message),\n      });\n      this.message = new Message(); // Reset the message after sending\n    } else {\n      console.error('Not connected to the server.');\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.disconnect();\n  }\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,MAAM,QAAQ,gBAAgB;AACvC,OAAO,KAAKC,MAAM,MAAM,eAAe;AACvC,SAASC,OAAO,QAAQ,mBAAmB;AAC3C,SAASC,YAAY,QAAQ,iBAAiB;AAOvC,WAAMC,aAAa,GAAnB,MAAMA,aAAa;EAAnBC,YAAA;IAGG,KAAAC,SAAS,GAAY,KAAK;IAC3B,KAAAC,QAAQ,GAAc,EAAE;IACxB,KAAAC,OAAO,GAAY,IAAIN,OAAO,EAAE;EA4DzC;EA1DEO,QAAQA,CAAA;IACN,IAAI,CAACC,WAAW,GAAG,IAAIV,MAAM,CAAC;MAC5BW,SAAS,EAAE,EAAE;MACbC,gBAAgB,EAAEA,CAAA,KAAM,IAAIX,MAAM,CAAC,sCAAsC,CAAC;MAC1EY,KAAK,EAAGC,GAAG,IAAI;QACbC,OAAO,CAACC,GAAG,CAAC,IAAIC,IAAI,EAAE,EAAEH,GAAG,CAAC;MAC9B,CAAC;MACDI,cAAc,EAAE;KACjB,CAAC;IAEF,IAAI,CAACR,WAAW,CAACS,SAAS,GAAIC,KAAK,IAAI;MACrC,IAAI,CAACd,SAAS,GAAG,IAAI;MACrBS,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGI,KAAK,CAAC;MAClC,IAAI,CAACV,WAAW,CAACW,SAAS,CAAC,iBAAiB,EAAGb,OAAO,IAAI;QACxDO,OAAO,CAACC,GAAG,CAAC,oBAAoB,GAAGR,OAAO,CAACc,IAAI,CAAC;MAClD,CAAC,CAAC;IACJ,CAAC;IAED,IAAI,CAACZ,WAAW,CAACa,YAAY,GAAIH,KAAK,IAAI;MACxC,IAAI,CAACd,SAAS,GAAG,KAAK;MACtBS,OAAO,CAACS,KAAK,CAAC,yBAAyB,GAAGJ,KAAK,CAACK,OAAO,CAAC,SAAS,CAAC,CAAC;MACnEV,OAAO,CAACS,KAAK,CAAC,sBAAsB,GAAGJ,KAAK,CAACE,IAAI,CAAC;IACpD,CAAC;IAED,IAAI,CAACZ,WAAW,CAACgB,YAAY,GAAIN,KAAK,IAAI;MACxC,IAAI,CAACd,SAAS,GAAG,KAAK;MACtBS,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC,IAAI,CAACN,WAAW,CAACJ,SAAS,EAAE,CAAC;IAC5D,CAAC;IAED,IAAI,CAACqB,OAAO,EAAE;EAChB;EAEQA,OAAOA,CAAA;IACb,IAAI,CAACjB,WAAW,CAACkB,QAAQ,EAAE;EAC7B;EAEQC,UAAUA,CAAA;IAChB,IAAI,IAAI,CAACnB,WAAW,EAAE;MACpB,IAAI,CAACA,WAAW,CAACoB,UAAU,EAAE;;EAEjC;EAEAC,WAAWA,CAAA;IACT,IAAI,IAAI,CAACzB,SAAS,EAAE;MAClB,IAAI,CAACI,WAAW,CAACsB,OAAO,CAAC;QACvBC,WAAW,EAAE,WAAW;QACxBX,IAAI,EAAEY,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC3B,OAAO;OAClC,CAAC;MACF,IAAI,CAACA,OAAO,GAAG,IAAIN,OAAO,EAAE,CAAC,CAAC;KAC/B,MAAM;MACLa,OAAO,CAACS,KAAK,CAAC,8BAA8B,CAAC;;EAEjD;EAEAY,WAAWA,CAAA;IACT,IAAI,CAACP,UAAU,EAAE;EACnB;CAED;AAjEYzB,aAAa,GAAAiC,UAAA,EALzBtC,SAAS,CAAC;EACTuC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,OAAO,EAAE,CAACrC,YAAY;CACvB,CAAC,C,EACWC,aAAa,CAiEzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}