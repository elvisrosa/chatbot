{"ast":null,"code":"import { Client } from '@stomp/stompjs';\nimport * as SockJS from 'sockjs-client';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class WsService {\n  constructor(auth) {\n    this.auth = auth;\n    this.connected = false;\n  }\n  initializeWebSocketConnection() {\n    const token = this.auth.getToken();\n    this.stompClient = new Client({\n      brokerURL: '',\n      // webSocketFactory: () => new SockJS('http://localhost:8080/chat-websocket'),\n      webSocketFactory: () => new SockJS(`http://localhost:8080/chat-websocket?ss=${token}`),\n      // new SockJS(`http://localhost:8080/chat-websocket?token=${encodeURIComponent('Bearer ' + token)}`),\n      connectHeaders: {\n        'Authorization': `Bearer ${token}`\n      },\n      debug: str => {\n        console.log(new Date(), str);\n      },\n      reconnectDelay: 50000\n    });\n    this.stompClient.onConnect = frame => {\n      this.connected = true;\n      console.log('Connected: ' + frame);\n      this.stompClient.subscribe('/user/queue/messages', message => {\n        console.log('Mensaje privado recibido:', message.body);\n      });\n    };\n    this.stompClient.onStompError = frame => {\n      this.connected = false;\n      console.error('Broker reported error: ' + frame.headers['message']);\n      console.error('Additional details: ' + frame.body);\n    };\n    this.stompClient.onDisconnect = frame => {\n      this.connected = false;\n      console.log(`Disconnected ${!this.stompClient.connected}`);\n    };\n    this.connect();\n  }\n  connect() {\n    this.stompClient.activate();\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.deactivate();\n    }\n  }\n  sendMessage(message) {\n    if (this.connected) {\n      this.stompClient.publish({\n        destination: '/app/chat.send',\n        body: JSON.stringify(message)\n      });\n    } else {\n      console.error('Not connected to the server.');\n    }\n  }\n  static {\n    this.ɵfac = function WsService_Factory(t) {\n      return new (t || WsService)(i0.ɵɵinject(i1.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: WsService,\n      factory: WsService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["Client","SockJS","WsService","constructor","auth","connected","initializeWebSocketConnection","token","getToken","stompClient","brokerURL","webSocketFactory","connectHeaders","debug","str","console","log","Date","reconnectDelay","onConnect","frame","subscribe","message","body","onStompError","error","headers","onDisconnect","connect","activate","disconnect","deactivate","sendMessage","publish","destination","JSON","stringify","i0","ɵɵinject","i1","AuthService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Elvis Rosa\\Desktop\\Proyectos Spring\\chatbot\\chat\\src\\app\\services\\ws.service.ts"],"sourcesContent":["import { Injectable, OnInit } from '@angular/core';\nimport { Client } from '@stomp/stompjs';\nimport * as SockJS from 'sockjs-client';\nimport { Message } from '../models/Message';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WsService {\n\n  private stompClient!: Client;\n  private connected: boolean = false;\n\n  constructor(private auth: AuthService) {\n  }\n\n  public initializeWebSocketConnection() {\n    const token = this.auth.getToken(); \n    this.stompClient = new Client({\n      brokerURL: '',\n      // webSocketFactory: () => new SockJS('http://localhost:8080/chat-websocket'),\n      webSocketFactory: () => new SockJS(`http://localhost:8080/chat-websocket?ss=${token}`),\n      // new SockJS(`http://localhost:8080/chat-websocket?token=${encodeURIComponent('Bearer ' + token)}`),\n      connectHeaders: {\n        'Authorization': `Bearer ${token}`\n      },\n      debug: (str) => {\n        console.log(new Date(), str);\n      },\n      reconnectDelay: 50000,        \n    });\n\n    this.stompClient.onConnect = (frame) => {\n      this.connected = true;\n      console.log('Connected: ' + frame);\n      this.stompClient.subscribe('/user/queue/messages', (message) => {\n          console.log('Mensaje privado recibido:', message.body);\n      });\n    };\n\n    this.stompClient.onStompError = (frame) => {\n      this.connected = false;\n      console.error('Broker reported error: ' + frame.headers['message']);\n      console.error('Additional details: ' + frame.body);\n    };\n\n    this.stompClient.onDisconnect = (frame) => {\n      this.connected = false;\n      console.log(`Disconnected ${!this.stompClient.connected}`);\n    }\n\n    this.connect();\n  }\n\n  public connect(): void {\n    this.stompClient.activate();\n  }\n\n  public disconnect(): void {\n    if (this.stompClient) {\n      this.stompClient.deactivate();\n    }\n  }\n\n  public sendMessage(message: Message): void {\n    if (this.connected) {\n      this.stompClient.publish({\n        destination: '/app/chat.send',\n        body: JSON.stringify(message),\n      });\n    } else {\n      console.error('Not connected to the server.');\n    }\n  }\n\n\n\n}\n"],"mappings":"AACA,SAASA,MAAM,QAAQ,gBAAgB;AACvC,OAAO,KAAKC,MAAM,MAAM,eAAe;;;AAOvC,OAAM,MAAOC,SAAS;EAKpBC,YAAoBC,IAAiB;IAAjB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,SAAS,GAAY,KAAK;EAGlC;EAEOC,6BAA6BA,CAAA;IAClC,MAAMC,KAAK,GAAG,IAAI,CAACH,IAAI,CAACI,QAAQ,EAAE;IAClC,IAAI,CAACC,WAAW,GAAG,IAAIT,MAAM,CAAC;MAC5BU,SAAS,EAAE,EAAE;MACb;MACAC,gBAAgB,EAAEA,CAAA,KAAM,IAAIV,MAAM,CAAC,2CAA2CM,KAAK,EAAE,CAAC;MACtF;MACAK,cAAc,EAAE;QACd,eAAe,EAAE,UAAUL,KAAK;OACjC;MACDM,KAAK,EAAGC,GAAG,IAAI;QACbC,OAAO,CAACC,GAAG,CAAC,IAAIC,IAAI,EAAE,EAAEH,GAAG,CAAC;MAC9B,CAAC;MACDI,cAAc,EAAE;KACjB,CAAC;IAEF,IAAI,CAACT,WAAW,CAACU,SAAS,GAAIC,KAAK,IAAI;MACrC,IAAI,CAACf,SAAS,GAAG,IAAI;MACrBU,OAAO,CAACC,GAAG,CAAC,aAAa,GAAGI,KAAK,CAAC;MAClC,IAAI,CAACX,WAAW,CAACY,SAAS,CAAC,sBAAsB,EAAGC,OAAO,IAAI;QAC3DP,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEM,OAAO,CAACC,IAAI,CAAC;MAC1D,CAAC,CAAC;IACJ,CAAC;IAED,IAAI,CAACd,WAAW,CAACe,YAAY,GAAIJ,KAAK,IAAI;MACxC,IAAI,CAACf,SAAS,GAAG,KAAK;MACtBU,OAAO,CAACU,KAAK,CAAC,yBAAyB,GAAGL,KAAK,CAACM,OAAO,CAAC,SAAS,CAAC,CAAC;MACnEX,OAAO,CAACU,KAAK,CAAC,sBAAsB,GAAGL,KAAK,CAACG,IAAI,CAAC;IACpD,CAAC;IAED,IAAI,CAACd,WAAW,CAACkB,YAAY,GAAIP,KAAK,IAAI;MACxC,IAAI,CAACf,SAAS,GAAG,KAAK;MACtBU,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC,IAAI,CAACP,WAAW,CAACJ,SAAS,EAAE,CAAC;IAC5D,CAAC;IAED,IAAI,CAACuB,OAAO,EAAE;EAChB;EAEOA,OAAOA,CAAA;IACZ,IAAI,CAACnB,WAAW,CAACoB,QAAQ,EAAE;EAC7B;EAEOC,UAAUA,CAAA;IACf,IAAI,IAAI,CAACrB,WAAW,EAAE;MACpB,IAAI,CAACA,WAAW,CAACsB,UAAU,EAAE;;EAEjC;EAEOC,WAAWA,CAACV,OAAgB;IACjC,IAAI,IAAI,CAACjB,SAAS,EAAE;MAClB,IAAI,CAACI,WAAW,CAACwB,OAAO,CAAC;QACvBC,WAAW,EAAE,gBAAgB;QAC7BX,IAAI,EAAEY,IAAI,CAACC,SAAS,CAACd,OAAO;OAC7B,CAAC;KACH,MAAM;MACLP,OAAO,CAACU,KAAK,CAAC,8BAA8B,CAAC;;EAEjD;;;uBAjEWvB,SAAS,EAAAmC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;IAAA;EAAA;;;aAATtC,SAAS;MAAAuC,OAAA,EAATvC,SAAS,CAAAwC,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}