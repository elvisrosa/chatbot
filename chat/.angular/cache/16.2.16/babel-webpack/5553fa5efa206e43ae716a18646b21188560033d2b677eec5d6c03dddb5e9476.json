{"ast":null,"code":"import { Client } from '@stomp/stompjs';\nimport * as SockJS from 'sockjs-client';\nimport { Message } from '../models/Message';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nfunction ChatComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ms_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ms_r2.content, \" \");\n  }\n}\nexport class ChatComponent {\n  constructor() {\n    this.connected = false;\n    this.messages = [];\n    this.message = new Message();\n  }\n  ngOnInit() {\n    this.stompClient = new Client({\n      brokerURL: '',\n      webSocketFactory: () => new SockJS('http://localhost:8080/chat-websocket'),\n      debug: str => {\n        console.log(new Date(), str);\n      },\n      reconnectDelay: 5000\n    });\n    this.stompClient.onConnect = frame => {\n      this.connected = true;\n      console.log('Connected: ' + frame);\n      this.stompClient.subscribe('/topic/messages', message => {\n        console.log('Received message: ' + message.body);\n      });\n    };\n    this.stompClient.onStompError = frame => {\n      this.connected = false;\n      console.error('Broker reported error: ' + frame.headers['message']);\n      console.error('Additional details: ' + frame.body);\n    };\n    this.stompClient.onDisconnect = frame => {\n      this.connected = false;\n      console.log(`Disconnected ${!this.stompClient.connected}`);\n    };\n    this.connect();\n  }\n  connect() {\n    this.stompClient.activate();\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.deactivate();\n    }\n  }\n  sendMessage() {\n    if (this.connected) {\n      this.stompClient.publish({\n        destination: '/app/chat',\n        body: JSON.stringify(this.message)\n      });\n      this.message = new Message(); // Reset the message after sending\n    } else {\n      console.error('Not connected to the server.');\n    }\n  }\n  ngOnDestroy() {\n    this.disconnect();\n  }\n  static {\n    this.ɵfac = function ChatComponent_Factory(t) {\n      return new (t || ChatComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ChatComponent,\n      selectors: [[\"app-chat\"]],\n      decls: 9,\n      vars: 2,\n      consts: [[1, \"content\"], [1, \"chat-container\"], [1, \"chat-header\"], [1, \"chat-messages\"], [\"scrollContainer\", \"\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"text\", \"placeholder\", \"Type your message here...\", 3, \"ngModel\", \"ngModelChange\", \"keyup.enter\"]],\n      template: function ChatComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"h2\");\n          i0.ɵɵtext(4, \"Chat with AI\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(5, \"div\", 3, 4);\n          i0.ɵɵtemplate(7, ChatComponent_div_7_Template, 2, 1, \"div\", 5);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(8, \"input\", 6);\n          i0.ɵɵlistener(\"ngModelChange\", function ChatComponent_Template_input_ngModelChange_8_listener($event) {\n            return ctx.message.content = $event;\n          })(\"keyup.enter\", function ChatComponent_Template_input_keyup_enter_8_listener() {\n            return ctx.sendMessage();\n          });\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(7);\n          i0.ɵɵproperty(\"ngForOf\", ctx.messages);\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngModel\", ctx.message.content);\n        }\n      },\n      dependencies: [i1.NgForOf],\n      encapsulation: 2\n    });\n  }\n}","map":{"version":3,"names":["Client","SockJS","Message","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ms_r2","content","ChatComponent","constructor","connected","messages","message","ngOnInit","stompClient","brokerURL","webSocketFactory","debug","str","console","log","Date","reconnectDelay","onConnect","frame","subscribe","body","onStompError","error","headers","onDisconnect","connect","activate","disconnect","deactivate","sendMessage","publish","destination","JSON","stringify","ngOnDestroy","selectors","decls","vars","consts","template","ChatComponent_Template","rf","ctx","ɵɵtemplate","ChatComponent_div_7_Template","ɵɵlistener","ChatComponent_Template_input_ngModelChange_8_listener","$event","ChatComponent_Template_input_keyup_enter_8_listener","ɵɵproperty"],"sources":["C:\\Users\\Elvis Rosa\\Desktop\\Proyectos Spring\\chat\\src\\app\\components\\chat.component.ts","C:\\Users\\Elvis Rosa\\Desktop\\Proyectos Spring\\chat\\src\\app\\components\\chat.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Client } from '@stomp/stompjs';\nimport * as SockJS from 'sockjs-client';\nimport { Message } from '../models/Message';\n\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n})\nexport class ChatComponent implements OnInit {\n\n  private stompClient!: Client;\n  private connected: boolean = false;\n  public messages: Message[] = [];\n  public message: Message = new Message();\n\n  ngOnInit(): void {\n    this.stompClient = new Client({\n      brokerURL: '',\n      webSocketFactory: () => new SockJS('http://localhost:8080/chat-websocket'),\n      debug: (str) => {\n        console.log(new Date(), str);\n      },\n      reconnectDelay: 5000,\n    });\n\n    this.stompClient.onConnect = (frame) => {\n      this.connected = true;\n      console.log('Connected: ' + frame);\n      this.stompClient.subscribe('/topic/messages', (message) => {\n        console.log('Received message: ' + message.body);\n      });\n    };\n\n    this.stompClient.onStompError = (frame) => {\n      this.connected = false;\n      console.error('Broker reported error: ' + frame.headers['message']);\n      console.error('Additional details: ' + frame.body);\n    };\n\n    this.stompClient.onDisconnect = (frame) => {\n      this.connected = false;\n      console.log(`Disconnected ${!this.stompClient.connected}`);\n    }\n\n    this.connect();\n  }\n\n  private connect(): void {\n    this.stompClient.activate();\n  }\n\n  private disconnect(): void {\n    if (this.stompClient) {\n      this.stompClient.deactivate();\n    }\n  }\n\n  sendMessage(): void {\n    if (this.connected) {\n      this.stompClient.publish({\n        destination: '/app/chat',\n        body: JSON.stringify(this.message),\n      });\n      this.message = new Message(); // Reset the message after sending\n    } else {\n      console.error('Not connected to the server.');\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.disconnect();\n  }\n\n}\n","<div class=\"content\">\n    <div class=\"chat-container\">\n        <div class=\"chat-header\">\n            <h2>Chat with AI</h2>\n        </div>\n        <div class=\"chat-messages\" #scrollContainer>\n            <div *ngFor=\"let ms of messages\">\n                {{ ms.content }}\n            </div>\n        </div>\n        <input type=\"text\" [(ngModel)]=\"message.content\" (keyup.enter)=\"sendMessage()\"\n            placeholder=\"Type your message here...\" />\n    </div>\n</div>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}