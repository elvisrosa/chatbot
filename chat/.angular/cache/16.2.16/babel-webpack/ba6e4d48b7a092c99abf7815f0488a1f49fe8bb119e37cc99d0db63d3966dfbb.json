{"ast":null,"code":"import { Client } from '@stomp/stompjs';\nimport * as SockJS from 'sockjs-client';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport class WsService {\n  constructor(auth) {\n    this.auth = auth;\n    this.connected = false;\n    this.messageSubject = new Subject();\n    this.message$ = this.messageSubject.asObservable();\n    this.typing$ = new Subject();\n  }\n  initializeWebSocketConnection() {\n    const token = this.auth.getToken();\n    this.stompClient = new Client({\n      brokerURL: '',\n      webSocketFactory: () => new SockJS(`http://localhost:8080/chat-websocket?ss=${token}`),\n      connectHeaders: {\n        'Authorization': `Bearer ${token}`\n      },\n      debug: str => {\n        console.log(new Date(), str);\n      },\n      reconnectDelay: 50000\n    });\n    this.stompClient.onConnect = frame => {\n      this.connected = true;\n      this.stompClient.subscribe('/user/queue/messages', message => {\n        const data = JSON.parse(message.body);\n        this.messageSubject.next(data);\n      });\n      this.stompClient.subscribe('/user/queue/typing', message => {\n        console.log('Typing notification:', message.body);\n        this.typing$.next(message.body); // necesitas definir typing$ como Subject<string>\n      });\n    };\n\n    this.stompClient.onStompError = frame => {\n      this.connected = false;\n      console.error('Broker reported error: ' + frame.headers['message']);\n      console.error('Additional details: ' + frame.body);\n    };\n    this.stompClient.onDisconnect = frame => {\n      this.connected = false;\n      console.log(`Disconnected ${!this.stompClient.connected}`);\n    };\n    this.connect();\n  }\n  connect() {\n    this.stompClient.activate();\n  }\n  disconnect() {\n    if (this.stompClient) {\n      this.stompClient.deactivate();\n    }\n  }\n  sendMessage(message) {\n    if (this.connected) {\n      this.stompClient.publish({\n        destination: '/app/chat.send',\n        body: JSON.stringify(message)\n      });\n    }\n  }\n  sendTypingNotification(toUsername) {\n    const typingMessage = {\n      to: toUsername,\n      type: 'typing'\n    };\n    this.stompClient.publish({\n      destination: '/app/chat.typing',\n      body: JSON.stringify(typingMessage)\n    });\n  }\n  static {\n    this.ɵfac = function WsService_Factory(t) {\n      return new (t || WsService)(i0.ɵɵinject(i1.AuthService));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: WsService,\n      factory: WsService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["Client","SockJS","Subject","WsService","constructor","auth","connected","messageSubject","message$","asObservable","typing$","initializeWebSocketConnection","token","getToken","stompClient","brokerURL","webSocketFactory","connectHeaders","debug","str","console","log","Date","reconnectDelay","onConnect","frame","subscribe","message","data","JSON","parse","body","next","onStompError","error","headers","onDisconnect","connect","activate","disconnect","deactivate","sendMessage","publish","destination","stringify","sendTypingNotification","toUsername","typingMessage","to","type","i0","ɵɵinject","i1","AuthService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Elvis Rosa\\Desktop\\Proyectos Spring\\chatbot\\chat\\src\\app\\services\\ws.service.ts"],"sourcesContent":["import { Injectable, OnInit } from '@angular/core';\nimport { Client } from '@stomp/stompjs';\nimport * as SockJS from 'sockjs-client';\nimport { Message } from '../models/Message';\nimport { AuthService } from './auth.service';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WsService {\n\n  private stompClient!: Client;\n  private connected: boolean = false;\n  private messageSubject = new Subject<Message>();\n  public message$ = this.messageSubject.asObservable();\n  public typing$ = new Subject<string>();\n\n\n  constructor(private auth: AuthService) { }\n\n  public initializeWebSocketConnection() {\n    const token = this.auth.getToken();\n    this.stompClient = new Client({\n      brokerURL: '',\n      webSocketFactory: () => new SockJS(`http://localhost:8080/chat-websocket?ss=${token}`),\n      connectHeaders: {\n        'Authorization': `Bearer ${token}`\n      },\n      debug: (str) => {\n        console.log(new Date(), str);\n      },\n      reconnectDelay: 50000,\n    });\n\n    this.stompClient.onConnect = (frame) => {\n      this.connected = true;\n      this.stompClient.subscribe('/user/queue/messages', (message) => {\n        const data = JSON.parse(message.body)\n        this.messageSubject.next(data);\n      });\n\n\n      this.stompClient.subscribe('/user/queue/typing', (message) => {\n        console.log('Typing notification:', message.body);\n        this.typing$.next(message.body); // necesitas definir typing$ como Subject<string>\n      });\n\n\n    };\n\n    this.stompClient.onStompError = (frame) => {\n      this.connected = false;\n      console.error('Broker reported error: ' + frame.headers['message']);\n      console.error('Additional details: ' + frame.body);\n    };\n\n    this.stompClient.onDisconnect = (frame) => {\n      this.connected = false;\n      console.log(`Disconnected ${!this.stompClient.connected}`);\n    }\n\n    this.connect();\n  }\n\n  public connect(): void {\n    this.stompClient.activate();\n  }\n\n  public disconnect(): void {\n    if (this.stompClient) {\n      this.stompClient.deactivate();\n    }\n  }\n\n  public sendMessage(message: Message): void {\n    if (this.connected) {\n      this.stompClient.publish({\n        destination: '/app/chat.send',\n        body: JSON.stringify(message),\n      });\n    }\n  }\n\n  public sendTypingNotification(toUsername: string): void {\n    const typingMessage = {\n      to: toUsername,\n      type: 'typing'\n    };\n    this.stompClient.publish({\n      destination: '/app/chat.typing',\n      body: JSON.stringify(typingMessage)\n    });\n  }\n\n\n\n\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}